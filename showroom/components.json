[
  {
    "title": "Getting Started",
    "id": "getting-started",
    "contents": [
      {
        "id": "getting-started",
        "title": "Getting Started",
        "repo": "react-components",
        "contentUrl": "README.md"
      }
    ]
  },
  {
    "title": "Components",
    "id": "components",
    "components": [
      {
        "id": "divider",
        "title": "Divider",
        "desc": "Divider",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Divider",
        "readmeUrl": "Divider/README.md",
        "examples": [
          {
            "title": "Vertical divider",
            "url": "Divider/examples/default.js"
          },
          {
            "title": "Horizontal divider",
            "url": "Divider/examples/horizontal.js"
          }
        ]
      },
      {
        "id": "dropdown",
        "title": "Dropdown",
        "desc": "Dropdown",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Dropdown",
        "readmeUrl": "Dropdown/README.md",
        "examples": [
          {
            "url": "Dropdown/examples/default.js"
          },
          {
            "title": "Dropdowns sizes",
            "description": "Dropdown comes in two different sizes: medium and small",
            "url": "Dropdown/examples/sizes.js"
          },
          {
            "title": "Menu position",
            "description": "When needed (e.g. when there isn't enough space under the dropdown to render the menu), it's possible to force the menu to open on top",
            "url": "Dropdown/examples/menuOnTop.js"
          },
          {
            "title": "Dropdowns options",
            "description": "* When the `searchable` prop is used, it's possible to search the desired value by writing into the dropdown.\n* Use `Clearable` if it should be possible to reset the selected value clicking on the `delete` icon that will appear once a value is selected.",
            "url": "Dropdown/examples/options.js"
          },
          {
            "title": "Multiselect",
            "description": "Dropdown could also allow the selection of multiple values",
            "url": "Dropdown/examples/multi.js"
          },
          {
            "title": "Groups",
            "description": "Dropdown could also allow the grouping",
            "url": "Dropdown/examples/groups.js"
          }
        ]
      },
      {
        "id": "dropdown-menu",
        "title": "DropdownMenu",
        "desc": "DropdownMenu",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/DropdownMenu",
        "readmeUrl": "DropdownMenu/README.md",
        "examples": [
          {
            "url": "DropdownMenu/examples/default.js"
          }
        ]
      },
      {
        "id": "icon",
        "title": "Icon",
        "desc": "Icon",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Icon",
        "readmeUrl": "Icon/README.md",
        "examples": [
          {
            "url": "Icon/examples/default.js"
          }
        ]
      },
      {
        "id": "panel",
        "title": "Panel",
        "desc": "Panel",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Panel",
        "readmeUrl": "Panel/README.md",
        "examples": [
          {
            "description": "In its simplest form, Panel is just a floating box surrounding any content you want to group togheter.",
            "url": "Panel/examples/default.js"
          },
          {
            "title": "Panel with header",
            "description": "A Panel could also have a header, showing a title or whatever you want to render in it",
            "url": "Panel/examples/header.js"
          },
          {
            "title": "Docked panel",
            "description": "A docked panel can be collapsed so that only the header is visible. It could be collapsed vertically:",
            "url": "Panel/examples/docked.js"
          },
          {
            "description": "or horizontally:",
            "url": "Panel/examples/dockedLeft.js"
          },
          {
            "title": "Tabbed panel",
            "description": "A tabbed panel will show content based on the currently selected tab.",
            "url": "Panel/examples/tabbed.js"
          }
        ]
      },
      {
        "id": "tooltip",
        "title": "Tooltip",
        "desc": "Tooltip",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Tooltip",
        "readmeUrl": "Tooltip/README.md",
        "examples": [
          {
            "url": "Tooltip/examples/default.js"
          },
          {
            "title": "Tooltip sizes",
            "description": "Tooltip comes in two different sizes:",
            "url": "Tooltip/examples/sizes.js"
          },
          {
            "title": "Tooltip positions",
            "description": "You can also set the position ('top', 'bottom', 'left', 'right') and the anchor point ('start', 'center', 'end') of the tooltip:",
            "url": "Tooltip/examples/positions.js"
          },
          {
            "title": "Tooltip events",
            "description": "By default, the tooltip is triggered when the mouse moves over the wrapped component. Using the `isOpen` prop you can also decide to manually control when the tooltip should appear:",
            "url": "Tooltip/examples/events.js"
          }
        ]
      },
      {
        "id": "background-dimmer",
        "title": "Background dimmer",
        "desc": "background dimmer",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/BackgroundDimmer",
        "readmeUrl": "BackgroundDimmer/README.md",
        "examples": [
          {
            "url": "BackgroundDimmer/examples/BackgroundDimmer.js"
          }
        ]
      },
      {
        "id": "react-flexview",
        "title": "FlexView",
        "desc": "A React component to abstract over flexbox",
        "repo": "react-flexview",
        "url": "https://github.com/buildo/react-flexview",
        "readmeUrl": "src/README.md",
        "examples": [
          {
            "url": "dev/examples/Column.example"
          },
          {
            "url": "dev/examples/Row.example"
          },
          {
            "title": "Under the hood: \"flex\" property computation",
            "description": "Go ahead and play with the following example to better understand how `FlexView` reacts to `grow`, `shrink` and `basis` props to compute the \"flex\" property",
            "url": "dev/examples/ComputeFlex.example"
          }
        ]
      },
      {
        "id": "loading-spinner",
        "title": "LoadingSpinner",
        "desc": "LoadingSpinner",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/LoadingSpinner",
        "readmeUrl": "LoadingSpinner/README.md",
        "examples": [
          {
            "url": "LoadingSpinner/examples/LoadingSpinner.js"
          }
        ]
      },
      {
        "id": "modal",
        "title": "Modal",
        "desc": "Modal",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Modal",
        "readmeUrl": "Modal/README.md",
        "examples": [
          {
            "url": "Modal/examples/default.js"
          },
          {
            "title": "Modal without header",
            "url": "Modal/examples/noHeader.js"
          },
          {
            "title": "Modal without footer",
            "url": "Modal/examples/noFooter.js"
          },
          {
            "title": "Passing arbitrary React context",
            "description": "Modal renders through a \"portal\", so React context is not propagated as expected.<br><br>*We know context isn't a public api, but it is required for <a href=\"https://github.com/reactjs/react-redux\">widely</a> <a href=\"https://github.com/yahoo/react-intl\">used</a> libraries to work. We also know there's `renderSubtreeIntoContainer`, which is unfortunately even more unstable.*<br/><br/>To solve this problem we export a handy `modalWithContext` that easily allows to pass context down correctly (look at the code!).",
            "url": "Modal/examples/withContext.js"
          }
        ]
      },
      {
        "id": "mobile-detector",
        "title": "MobileDetector",
        "desc": "MobileDetector",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/MobileDetector",
        "readmeUrl": "MobileDetector/README.md",
        "examples": [
          {
            "url": "MobileDetector/examples/MobileDetector.js"
          }
        ]
      },
      {
        "id": "scroll-view",
        "title": "ScrollView",
        "desc": "ScrollView",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/ScrollView",
        "readmeUrl": "ScrollView/README.md",
        "examples": [
          {
            "url": "ScrollView/examples/default.js"
          }
        ]
      },
      {
        "id": "text-overflow",
        "title": "TextOverflow",
        "desc": "TextOverflow",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/TextOverflow",
        "readmeUrl": "TextOverflow/README.md",
        "examples": [
          {
            "description": "By default, `TextOverflow` will wrap the truncaded text in a `Popover`, but you can change the rendering method on overflow as you like. In the example below we're wrapping the trimmed text in a Tooltip:",
            "url": "TextOverflow/examples/default.js"
          },
          {
            "title": "Overflow on resize",
            "description": "`TextOverflow` use `ResizeSensor` to detect resize events. In the following example you can try to resize your window till the overflowing text will change color:",
            "url": "TextOverflow/examples/resize.js"
          },
          {
            "description": "TextOverflow can be used in any place. Below we're using it in a `Dropdown` label:",
            "url": "TextOverflow/examples/dropdown.js"
          }
        ]
      },
      {
        "id": "popover",
        "title": "Popover",
        "desc": "Popover",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Popover",
        "readmeUrl": "Popover/README.md",
        "examples": [
          {
            "title": "Triggering on hover",
            "url": "Popover/examples/hover.js"
          },
          {
            "title": "Triggering on hover with 'auto' anchor",
            "url": "Popover/examples/hover-auto.js"
          },
          {
            "title": "Triggering on click",
            "url": "Popover/examples/click.js"
          }
        ]
      },
      {
        "id": "toaster",
        "title": "Toaster",
        "desc": "Toaster",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Toaster",
        "readmeUrl": "Toaster/README.md",
        "examples": [
          {
            "url": "Toaster/examples/default.js"
          }
        ]
      },
      {
        "id": "badge",
        "title": "Badge",
        "desc": "Badge",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Badge",
        "readmeUrl": "Badge/README.md",
        "examples": [
          {
            "url": "Badge/examples/default.js"
          },
          {
            "description": "In the example below you can see a possible use of this UI component as a counter rendered over icons",
            "url": "Badge/examples/icon.js"
          }
        ]
      },
      {
        "id": "more-or-less",
        "title": "MoreOrLess",
        "desc": "MoreOrLess",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/MoreOrLess",
        "readmeUrl": "MoreOrLess/README.md",
        "examples": [
          {
            "url": "MoreOrLess/examples/default.js"
          }
        ]
      },
      {
        "id": "confirmation-input",
        "title": "ConfirmationInput",
        "desc": "ConfirmationInput",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/ConfirmationInput",
        "readmeUrl": "ConfirmationInput/README.md",
        "examples": [
          {
            "url": "ConfirmationInput/examples/default.js"
          }
        ]
      },
      {
        "id": "nav-bar",
        "title": "NavBar",
        "desc": "NavBar",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/NavBar",
        "readmeUrl": "NavBar/README.md",
        "examples": [
          {
            "url": "NavBar/examples/default.js"
          }
        ]
      },
      {
        "id": "toggle",
        "title": "Toggle",
        "desc": "Toggle",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Toggle",
        "readmeUrl": "Toggle/README.md",
        "examples": [
          {
            "url": "Toggle/examples/default.js"
          }
        ]
      },
      {
        "id": "button",
        "title": "Button",
        "desc": "Button",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Button",
        "readmeUrl": "Button/README.md",
        "examples": [
          {
            "url": "Button/examples/default.js"
          },
          {
            "url": "Button/examples/types.js",
            "title": "Type of buttons",
            "description": "A button can be formatted to show different levels of emphasis. We have 6 types of buttons:"
          },
          {
            "url": "Button/examples/sizes.js",
            "title": "Buttons sizes",
            "description": "There are 3 possible button sizes:"
          },
          {
            "url": "Button/examples/fluid.js",
            "title": "Fluid button",
            "description": "Block buttons typically occupy all the horizontal space available in its container. There should be only 1 button on the same line, if more than one block button is present they are stacked vertically."
          },
          {
            "url": "Button/examples/async.js",
            "title": "Async buttons",
            "description": "This variant can be applied to default, primary, positive and flat buttons."
          }
        ]
      },
      {
        "id": "meter",
        "title": "Meter",
        "desc": "Meter",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Meter",
        "readmeUrl": "Meter/README.md",
        "examples": [
          {
            "description": "You can customize the style (colors) of Meter based on the range in which the current value falls",
            "url": "Meter/examples/default.js"
          },
          {
            "description": "Ranges could also have holes between them. If the current value doesn't fall in any of the given ranges, it will use a base style you can configure as you like:",
            "url": "Meter/examples/holes.js"
          },
          {
            "title": "Custom labels",
            "description": "By default, Meter display an auto-calculated percentage next to the bar. You can customize your own label formatter in order to show whathever you like:",
            "url": "Meter/examples/customLabels.js"
          }
        ]
      },
      {
        "id": "collapsible-section",
        "title": "CollapsibleSection",
        "desc": "CollapsibleSection",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/CollapsibleSection",
        "readmeUrl": "CollapsibleSection/README.md",
        "examples": [
          {
            "url": "CollapsibleSection/examples/default.js"
          }
        ]
      },
      {
        "id": "link-state",
        "title": "Link state",
        "desc": "Link state",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/LinkState",
        "examples": [
          {
            "url": "LinkState/examples/default.js"
          },
          {
            "url": "LinkState/examples/deep.js"
          }
        ]
      },
      {
        "id": "browser-detector",
        "title": "BrowserDetector",
        "desc": "BrowserDetector",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/BrowserDetector",
        "readmeUrl": "BrowserDetector/README.md",
        "examples": [
          {
            "url": "BrowserDetector/examples/default.js"
          }
        ]
      },
      {
        "id": "time-picker",
        "title": "TimePicker",
        "desc": "TimePicker",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/TimePicker",
        "readmeUrl": "TimePicker/README.md",
        "examples": [
          {
            "title": "12h time format",
            "url": "TimePicker/examples/TimePicker12.js"
          },
          {
            "title": "24h time format (bounded range)",
            "url": "TimePicker/examples/TimePicker24.js"
          }
        ]
      },
      {
        "id": "focusable-view",
        "title": "FocusableView",
        "desc": "FocusableView",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/FocusableView",
        "readmeUrl": "FocusableView/README.md",
        "examples": [
          {
            "url": "FocusableView/examples/default.js"
          }
        ]
      },
      {
        "id": "resize-sensor",
        "title": "ResizeSensor",
        "desc": "ResizeSensor",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/ResizeSensor",
        "readmeUrl": "ResizeSensor/README.md",
        "examples": [
          {
            "url": "ResizeSensor/examples/default.js"
          }
        ]
      },
      {
        "id": "react-input-children",
        "title": "InputChildren",
        "desc": "ReactInputChildren is a replacement for the base input react component capable of rendering a child (link, button...) inside the input itself. It supports the same props of react input.",
        "repo": "react-input-children",
        "url": "https://github.com/buildo/react-input-children",
        "readmeUrl": "src/README.md",
        "examples": [
          {
            "title": "Show password",
            "url": "examples/Password.example"
          },
          {
            "title": "Button",
            "url": "examples/Button.example"
          },
          {
            "title": "Anything you want",
            "url": "examples/Anything.example"
          }
        ]
      },
      {
        "id": "react-autosize-textarea",
        "title": "TextareaAutosize",
        "desc": "A textarea perfectly compatible with ReactJS default one which auto resizes its height based on user input.",
        "repo": "react-autosize-textarea",
        "url": "https://github.com/buildo/react-autosize-textarea",
        "readmeUrl": "src/README.md",
        "examples": [
          {
            "url": "examples/Empty.example"
          },
          {
            "url": "examples/MinimumHeight.example"
          },
          {
            "url": "examples/Prefilled.example"
          }
        ]
      },
      {
        "id": "react-cookie-banner",
        "title": "CookieBanner",
        "desc": "React Cookie banner which can be automatically dismissed with a scroll. Because fuck The Cookie Law, that's why.",
        "repo": "react-cookie-banner",
        "url": "https://github.com/buildo/react-cookie-banner",
        "readmeUrl": "src/README.md",
        "examples": [
          {
            "url": "examples/Default.example"
          }
        ]
      },
      {
        "id": "tablo",
        "title": "Tablo",
        "desc": "A table component, based on fixed-data-table-2",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/Tablo",
        "readmeUrl": "Tablo/API.md",
        "examples": [
          {
            "url": "Tablo/examples/default.js"
          },
          {
            "title": "Controlled scrolling",
            "description": "Tablo allows you to control scrolling. In the following example, after the table get focus (e.g. by clicking on it), you can scroll it using the arrow keys.<br />`UP` and `DOWN` arrows will change the selected entry, while `LEFT` and `RIGHT` arrows will control the horizontal scrolling.",
            "url": "Tablo/examples/scrollable.js"
          }
        ]
      },
      {
        "id": "async-status-indicator",
        "title": "Async Status Indicator",
        "desc": "A component that shows the status of an async operation",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/AsyncStatusIndicator",
        "readmeUrl": "AsyncStatusIndicator/README.md",
        "examples": [
          {
            "title": "A typical usage",
            "url": "AsyncStatusIndicator/examples/default.js"
          },
          {
            "title": "All the states",
            "url": "AsyncStatusIndicator/examples/list.js"
          }
        ]
      },
      {
        "id": "formatted-text",
        "title": "FormattedText",
        "desc": "A component that transforms `\\n` in `<br>` and links in `<a>`",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/FormattedText",
        "readmeUrl": "FormattedText/README.md",
        "examples": [
          {
            "title": "A typical usage",
            "url": "FormattedText/examples/default.js"
          }
        ]
      },
      {
        "id": "date-picker",
        "title": "DatePicker",
        "desc": "A datepicker component based on react-dates",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/DatePicker",
        "readmeUrl": "DatePicker/README.md",
        "examples": [
          {
            "title": "A typical usage",
            "url": "DatePicker/examples/default.js"
          }
        ]
      },
      {
        "id": "date-field",
        "title": "DateField",
        "desc": "A component to enter dates in forms",
        "repo": "react-components",
        "url": "https://github.com/buildo/react-components/tree/master/src/DateField",
        "readmeUrl": "DateField/README.md",
        "examples": [
          {
            "title": "A typical usage",
            "url": "DateField/examples/default.js"
          },
          {
            "title": "Handle date validation",
            "url": "DateField/examples/isValid.js"
          }
        ]
      }
    ]
  }
]
